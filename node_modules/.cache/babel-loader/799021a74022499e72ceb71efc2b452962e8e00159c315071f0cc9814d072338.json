{"ast":null,"code":"import { mapState } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\nimport ToggleGrid from '@/components/ToggleGrid';\nexport default {\n  props: ['clickedNext', 'currentStep'],\n  mixins: [validationMixin],\n  components: {\n    ToggleGrid\n  },\n  data() {\n    return {\n      genderOptions: [{\n        label: 'Men',\n        value: 'Men'\n      }, {\n        label: 'Ladies',\n        value: 'Ladies'\n      }, {\n        label: 'Mixed',\n        value: 'Mixed'\n      }],\n      sportOptions: [{\n        label: 'Tennis',\n        value: 'Tennis'\n      }, {\n        label: 'Pickleball',\n        value: 'Pickleball'\n      }]\n    };\n  },\n  computed: {\n    ...mapState('court', ['formCreateEvent'])\n  },\n  validations: {\n    formCreateEvent: {\n      eventName: {\n        required\n      },\n      startDate: {\n        required\n      },\n      startTime: {\n        required\n      },\n      endDate: {\n        required\n      },\n      endTime: {\n        required\n      }\n    }\n  },\n  watch: {\n    $v: {\n      handler: function (val) {\n        if (!val.$invalid) {\n          this.$emit('can-continue', {\n            value: true\n          });\n        } else {\n          this.$emit('can-continue', {\n            value: false\n          });\n        }\n      },\n      deep: true\n    },\n    clickedNext(val) {\n      if (val === true) {\n        this.$v.formCreateEvent.$touch();\n      }\n    }\n  },\n  mounted() {\n    if (!this.$v.$invalid) {\n      this.$emit('can-continue', {\n        value: true\n      });\n    } else {\n      this.$emit('can-continue', {\n        value: false\n      });\n    }\n  },\n  methods: {\n    disabledRange: function (date) {\n      return date < new Date();\n    }\n  }\n};","map":{"version":3,"names":["mapState","validationMixin","required","ToggleGrid","props","mixins","components","data","genderOptions","label","value","sportOptions","computed","validations","formCreateEvent","eventName","startDate","startTime","endDate","endTime","watch","$v","handler","val","$invalid","$emit","deep","clickedNext","$touch","mounted","methods","disabledRange","date","Date"],"sources":["src/components/events/StepBasicInfo.vue"],"sourcesContent":["<template>\n  <div v-if=\"formCreateEvent\">\n    <div class=\"event-type-wrapper\">\n      <h2>Event Type</h2>\n      <div>\n        <label class=\"label\">Pick-Up</label>\n        <VueToggles\n          height=\"30\"\n          width=\"60\"\n          checkedText=\"\"\n          uncheckedText=\"\"\n          checkedBg=\"#FF3464\"\n          uncheckedBg=\"lightgrey\"\n          :value=\"formCreateEvent.isPickUp\"\n          @click=\"formCreateEvent.isPickUp = !formCreateEvent.isPickUp\"\n        />\n        <p>(Open Invite to All)</p>\n      </div>\n    </div>\n    <div class=\"field\">\n      <ToggleGrid\n        :options=\"sportOptions\"\n        :selectedOption=\"formCreateEvent.selectedSport\"\n        @selected=\"(opt) => formCreateEvent.selectedSport = opt\"\n      />\n    </div>\n    <div class=\"field\">\n      <ToggleGrid\n        :options=\"genderOptions\"\n        :selectedOption=\"formCreateEvent.selectedGender\"\n        @selected=\"(opt) => formCreateEvent.selectedGender = opt\"\n      />\n    </div>\n    <div class=\"field\">\n      <label>Event Name</label>\n      <input\n        :class=\"['input', ($v.formCreateEvent.eventName.$error) ? 'is-danger' : '']\"\n        type=\"text\"\n        placeholder=\"Required\"\n        v-model=\"formCreateEvent.eventName\"\n      />\n      <p v-if=\"$v.formCreateEvent.eventName.$error\" class=\"help is-danger\">This field is required</p>\n    </div>\n    <div class=\"field\">\n      <label>Start</label>\n      <div class=\"date-grid\">\n        <date-picker v-model=\"formCreateEvent.startDate\" placeholder=\"Required\" type=\"date\" :disabled-date=\"disabledRange\"></date-picker>\n        <date-picker v-model=\"formCreateEvent.startTime\" placeholder=\"12:00\" type=\"time\" format=\"HH:mm\"></date-picker>\n      </div>\n    </div>\n    <div class=\"field\">\n      <label>End</label>\n      <div class=\"date-grid\">\n        <date-picker v-model=\"formCreateEvent.endDate\" placeholder=\"Required\" type=\"date\" :disabled-date=\"disabledRange\"></date-picker>\n        <date-picker v-model=\"formCreateEvent.endTime\" placeholder=\"12:00\" type=\"time\" format=\"HH:mm\"></date-picker>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {validationMixin} from 'vuelidate'\nimport {required} from 'vuelidate/lib/validators'\nimport ToggleGrid from '@/components/ToggleGrid'\n\nexport default {\n  props: ['clickedNext', 'currentStep'],\n  mixins: [validationMixin],\n  components: { ToggleGrid },\n  data() {\n    return {\n      genderOptions: [\n        { label: 'Men', value: 'Men' },\n        { label: 'Ladies', value: 'Ladies' },\n        { label: 'Mixed', value: 'Mixed' }\n      ],\n      sportOptions: [\n        { label: 'Tennis', value: 'Tennis' },\n        { label: 'Pickleball', value: 'Pickleball' }\n      ]\n    }\n  },\n  computed: {\n    ...mapState('court', ['formCreateEvent'])\n  },\n  validations: {\n    formCreateEvent: {\n      eventName: {\n        required\n      },\n      startDate: {\n        required,\n      },\n      startTime: {\n        required\n      },\n      endDate: {\n        required,\n      },\n      endTime: {\n        required\n      }\n    }\n  },\n  watch: {\n    $v: {\n      handler: function (val) {\n        if(!val.$invalid) {\n          this.$emit('can-continue', {value: true});\n        } else {\n          this.$emit('can-continue', {value: false});\n        }\n      },\n      deep: true\n    },\n    clickedNext(val) {\n      if(val === true) {\n        this.$v.formCreateEvent.$touch();\n      }\n    }\n  },\n  mounted() {\n    if(!this.$v.$invalid) {\n      this.$emit('can-continue', {value: true});\n    } else {\n      this.$emit('can-continue', {value: false});\n    }\n  },\n  methods: {\n    disabledRange: function (date) {\n      return date < new Date();\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.event-type-wrapper {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h2 {\n    font-size: 1.5em;\n    margin-bottom: 0;\n  }\n\n  & > div {\n    display: grid;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n    grid-gap: 0.3rem;\n\n    label {\n      font-size: 1em;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 0.8em;\n      grid-column: -1/1;\n    }\n  }\n}\n.field {\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: column;\n\n  label {\n    font-size: 1.2em;\n  }\n  input {\n    height: 40px;\n    font-size: 1em;\n    border: none;\n    border-radius: 4px;\n    padding: 0 8px;\n    margin-top: 4px;\n  }\n\n  .date-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 1rem;\n    gap: 1rem;\n\n    .mx-datepicker {\n      width: 100%;\n    }\n  }\n}\n</style>"],"mappings":"AA6DA,SAAAA,QAAA;AACA,SAAAC,eAAA;AACA,SAAAC,QAAA;AACA,OAAAC,UAAA;AAEA;EACAC,KAAA;EACAC,MAAA,GAAAJ,eAAA;EACAK,UAAA;IAAAH;EAAA;EACAI,KAAA;IACA;MACAC,aAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA,EACA;MACAC,YAAA,GACA;QAAAF,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EACAE,QAAA;IACA,GAAAZ,QAAA;EACA;EACAa,WAAA;IACAC,eAAA;MACAC,SAAA;QACAb;MACA;MACAc,SAAA;QACAd;MACA;MACAe,SAAA;QACAf;MACA;MACAgB,OAAA;QACAhB;MACA;MACAiB,OAAA;QACAjB;MACA;IACA;EACA;EACAkB,KAAA;IACAC,EAAA;MACAC,OAAA,WAAAA,CAAAC,GAAA;QACA,KAAAA,GAAA,CAAAC,QAAA;UACA,KAAAC,KAAA;YAAAf,KAAA;UAAA;QACA;UACA,KAAAe,KAAA;YAAAf,KAAA;UAAA;QACA;MACA;MACAgB,IAAA;IACA;IACAC,YAAAJ,GAAA;MACA,IAAAA,GAAA;QACA,KAAAF,EAAA,CAAAP,eAAA,CAAAc,MAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,UAAAR,EAAA,CAAAG,QAAA;MACA,KAAAC,KAAA;QAAAf,KAAA;MAAA;IACA;MACA,KAAAe,KAAA;QAAAf,KAAA;MAAA;IACA;EACA;EACAoB,OAAA;IACAC,aAAA,WAAAA,CAAAC,IAAA;MACA,OAAAA,IAAA,OAAAC,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}