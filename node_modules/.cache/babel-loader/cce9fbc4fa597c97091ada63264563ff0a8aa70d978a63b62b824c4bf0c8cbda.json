{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapGetters } from \"vuex\";\nimport { getLatLngCenter } from \"../../helpers.js\";\nimport CourtAvailabilityMixin from \"../../mixins/court-availability-mixin\";\nconst getInitialCenter = () => ({\n  lat: 30.179154403043913,\n  lng: -95.51819553625609\n});\nexport default {\n  name: \"CourtAvailabilityMap\",\n  mixins: [CourtAvailabilityMixin],\n  data() {\n    return {\n      center: getInitialCenter(),\n      selectedMarker: null,\n      myPosition: \"\",\n      markers: null\n    };\n  },\n  props: [\"sortedCourt\"],\n  computed: {\n    ...mapState(\"court\", [\"courts\", \"courtAvailability\"]),\n    ...mapState(\"auth\", [\"profile\"]),\n    ...mapGetters({\n      courtWithTimes: \"court/courtWithTimes\"\n    }),\n    courtMarkers() {\n      const markers = this.courts.data.map(court => {\n        return {\n          position: {\n            lat: court.location._lat,\n            lng: court.location._long\n          },\n          court,\n          ...this.getTodayAvailability(court)\n        };\n      });\n      this.markers = markers;\n      return markers;\n    },\n    defaultCenter() {\n      if (!this.courtMarkers.length) {\n        return getInitialCenter();\n      }\n      const latlngs = this.courtMarkers.map(({\n        position\n      }) => [position.lat, position.lng]);\n      const center = getLatLngCenter(latlngs);\n      if (this.sortedCourt) {\n        return {\n          lat: this.sortedCourt.location._lat,\n          lng: this.sortedCourt.location._long\n        };\n      } else {\n        return {\n          lat: center[0],\n          lng: center[1]\n        };\n      }\n    }\n  },\n  watch: {\n    defaultCenter(val) {\n      if (val) {\n        this.center = val;\n      }\n    },\n    center: {\n      handler(newCenter) {\n        // Perform action when `this.center` changes\n        // Call a method or perform any other actions\n      },\n      deep: true // Enable deep watching for nested properties within `center`\n    }\n  },\n\n  async mounted() {\n    await this.$store.dispatch(\"auth/fetchProfile\");\n    if (this.sortedCourt) {\n      this.center = {\n        lat: this.sortedCourt.location._lat,\n        lng: this.sortedCourt.location._long\n      };\n    }\n    this.$refs.mapRef.$mapPromise.then(map => {\n      map.panTo(this.center);\n    });\n    this.courtMarkersVal();\n  },\n  methods: {\n    courtMarkersVal() {\n      const markers = this.courts.data.map(court => {\n        return {\n          position: {\n            lat: court.location._lat,\n            lng: court.location._long\n          },\n          court,\n          ...this.getTodayAvailability(court)\n        };\n      });\n      this.markers = markers;\n    },\n    getZoomedOutPosition(latitude, longitude, zoomLevel) {\n      // Adjust the latitude and longitude based on the desired zoom level\n      const latitudeAdjusted = latitude - zoomLevel * 0.01;\n      const longitudeAdjusted = longitude + zoomLevel * 0.01;\n      return {\n        lat: latitudeAdjusted,\n        lng: longitudeAdjusted\n      };\n    },\n    handleMarkerClick(marker) {\n      this.selectedMarker = marker;\n      this.center = marker.position;\n    },\n    getMarkerIcon({\n      availability,\n      court\n    }) {\n      let url = require(\"../../assets/markers/red.svg\");\n      if (court.isRaining) {\n        url = require(\"../../assets/markers/blue.svg\");\n      } else if (this.getFreeCourt(court) >= 1) {\n        url = require(\"../../assets/markers/green.svg\");\n      }\n      return {\n        url\n      };\n    },\n    goToCourtDetail(court) {\n      this.$router.push({\n        name: \"courtSchedule\",\n        params: {\n          id: court.id\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","getLatLngCenter","CourtAvailabilityMixin","getInitialCenter","lat","lng","name","mixins","data","center","selectedMarker","myPosition","markers","props","computed","courtWithTimes","courtMarkers","courts","map","court","position","location","_lat","_long","getTodayAvailability","defaultCenter","length","latlngs","sortedCourt","watch","val","handler","newCenter","deep","mounted","$store","dispatch","$refs","mapRef","$mapPromise","then","panTo","courtMarkersVal","methods","getZoomedOutPosition","latitude","longitude","zoomLevel","latitudeAdjusted","longitudeAdjusted","handleMarkerClick","marker","getMarkerIcon","availability","url","require","isRaining","getFreeCourt","goToCourtDetail","$router","push","params","id"],"sources":["src/components/home/CourtAvailabilityMap.vue"],"sourcesContent":["<template>\n  <GmapMap\n    v-if=\"center\"\n    :center=\"center\"\n    :zoom=\"13\"\n    map-type-id=\"terrain\"\n    style=\"width: 100%; height: 260px\"\n    ref=\"mapRef\"\n    :options=\"{\n      zoomControl: false,\n      mapTypeControl: false,\n      scaleControl: false,\n      streetViewControl: false,\n      fullscreenControl: false,\n      disableDefaultUi: false,\n    }\"\n  >\n    <GmapMarker\n      :key=\"index\"\n      v-for=\"(m, index) in markers\"\n      :position=\"m.position\"\n      clickable\n      :draggable=\"false\"\n      :icon=\"getMarkerIcon(m)\"\n      @click=\"handleMarkerClick(m)\"\n    />\n    <GmapInfoWindow\n      :opened=\"!!selectedMarker\"\n      :position=\"selectedMarker && selectedMarker.position\"\n      :options=\"{\n        pixelOffset: {\n          width: 0,\n          height: -35,\n        },\n      }\"\n      @closeclick=\"selectedMarker = null\"\n    >\n      <div v-if=\"selectedMarker\" class=\"info-window-content\">\n        <h3 @click=\"goToCourtDetail(selectedMarker.court)\">\n          {{ selectedMarker.court.name }}\n        </h3>\n        <p>\n          {{ getFreeCourt(selectedMarker.court) }} of\n          {{ selectedMarker.court.courtNum }} court{{\n            getFreeCourt(selectedMarker.court) > 1 ? \"s\" : \"\"\n          }}\n          free\n        </p>\n        <p\n          v-if=\"\n            getFreeCourt(selectedMarker.court) === 0 &&\n            selectedMarker.availability.availableAt\n          \"\n        >\n          Available at\n          {{ selectedMarker.availability.availableAt | displayDate(\"hh:mm A\") }}\n        </p>\n        <p\n          v-else-if=\"\n            getFreeCourt(selectedMarker.court) >= 1 &&\n            selectedMarker.availability.unavailableAt\n          \"\n        >\n          Available until\n          {{\n            selectedMarker.availability.unavailableAt | displayDate(\"hh:mm A\")\n          }}\n        </p>\n      </div>\n    </GmapInfoWindow>\n  </GmapMap>\n</template>\n\n<script>\nimport { mapState, mapGetters } from \"vuex\";\nimport { getLatLngCenter } from \"../../helpers.js\";\nimport CourtAvailabilityMixin from \"../../mixins/court-availability-mixin\";\n\nconst getInitialCenter = () => ({\n  lat: 30.179154403043913,\n  lng: -95.51819553625609,\n});\n\nexport default {\n  name: \"CourtAvailabilityMap\",\n  mixins: [CourtAvailabilityMixin],\n  data() {\n    return {\n      center: getInitialCenter(),\n      selectedMarker: null,\n      myPosition: \"\",\n      markers: null,\n    };\n  },\n  props: [\"sortedCourt\"],\n  computed: {\n    ...mapState(\"court\", [\"courts\", \"courtAvailability\"]),\n    ...mapState(\"auth\", [\"profile\"]),\n    ...mapGetters({\n      courtWithTimes: \"court/courtWithTimes\",\n    }),\n\n    courtMarkers() {\n      const markers = this.courts.data.map((court) => {\n        return {\n          position: {\n            lat: court.location._lat,\n            lng: court.location._long,\n          },\n          court,\n          ...this.getTodayAvailability(court),\n        };\n      });\n      this.markers = markers;\n      return markers;\n    },\n\n    defaultCenter() {\n      if (!this.courtMarkers.length) {\n        return getInitialCenter();\n      }\n\n      const latlngs = this.courtMarkers.map(({ position }) => [\n        position.lat,\n        position.lng,\n      ]);\n\n      const center = getLatLngCenter(latlngs);\n      if (this.sortedCourt) {\n        return {\n          lat: this.sortedCourt.location._lat,\n          lng: this.sortedCourt.location._long,\n        };\n      } else {\n        return {\n          lat: center[0],\n          lng: center[1],\n        };\n      }\n    },\n  },\n  watch: {\n    defaultCenter(val) {\n      if (val) {\n        this.center = val;\n      }\n    },\n\n    center: {\n      handler(newCenter) {\n        // Perform action when `this.center` changes\n        // Call a method or perform any other actions\n      },\n      deep: true, // Enable deep watching for nested properties within `center`\n    },\n  },\n  async mounted() {\n    await this.$store.dispatch(\"auth/fetchProfile\");\n    if (this.sortedCourt) {\n      this.center = {\n        lat: this.sortedCourt.location._lat,\n        lng: this.sortedCourt.location._long,\n      };\n    }\n\n    this.$refs.mapRef.$mapPromise.then((map) => {\n      map.panTo(this.center);\n    });\n\n    this.courtMarkersVal();\n  },\n  methods: {\n    courtMarkersVal() {\n      const markers = this.courts.data.map((court) => {\n        return {\n          position: {\n            lat: court.location._lat,\n            lng: court.location._long,\n          },\n          court,\n          ...this.getTodayAvailability(court),\n        };\n      });\n      this.markers = markers;\n    },\n    getZoomedOutPosition(latitude, longitude, zoomLevel) {\n      // Adjust the latitude and longitude based on the desired zoom level\n      const latitudeAdjusted = latitude - zoomLevel * 0.01;\n      const longitudeAdjusted = longitude + zoomLevel * 0.01;\n\n      return {\n        lat: latitudeAdjusted,\n        lng: longitudeAdjusted,\n      };\n    },\n    handleMarkerClick(marker) {\n      this.selectedMarker = marker;\n      this.center = marker.position;\n    },\n    getMarkerIcon({ availability, court }) {\n      let url = require(\"../../assets/markers/red.svg\");\n      if (court.isRaining) {\n        url = require(\"../../assets/markers/blue.svg\");\n      } else if (this.getFreeCourt(court) >= 1) {\n        url = require(\"../../assets/markers/green.svg\");\n      }\n      return { url };\n    },\n    goToCourtDetail(court) {\n      this.$router.push({\n        name: \"courtSchedule\",\n        params: {\n          id: court.id,\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.info-window-content {\n  color: black;\n  padding: 6px;\n\n  h3 {\n    margin-bottom: 4px;\n    cursor: pointer;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}