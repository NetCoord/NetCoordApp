{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from 'moment';\nimport { mapState } from 'vuex';\nimport CourtAvailabilityMixin from '../mixins/court-availability-mixin';\nexport default {\n  name: 'SearchModal',\n  mixins: [CourtAvailabilityMixin],\n  data() {\n    return {\n      startDate: null,\n      startTime: null,\n      availableCourts: null,\n      hourOptions: Array.from({\n        length: 17\n      }).map((_, i) => i + 7)\n    };\n  },\n  computed: {\n    ...mapState('court', ['courts']),\n    submitDisabled() {\n      return !this.startDate || !this.startTime;\n    }\n  },\n  watch: {\n    startDate(val) {\n      this.startTime = null;\n    },\n    startTime(newTime, oldTime) {\n      this.$refs.timepicker.closePopup();\n    }\n  },\n  methods: {\n    disabledDate: function (date) {\n      const todayStart = moment().subtract(1, 'days').endOf('day');\n      const limit = moment().add(2, 'days').startOf('day');\n      return date < todayStart || date >= limit;\n    },\n    disabledTime(date) {\n      if (this.startDate) {\n        const isToday = moment().startOf('day').diff(this.startDate, 'days') === 0;\n        if (isToday) {\n          return date < moment().add(1, 'hours').toDate();\n        }\n      }\n      return null;\n    },\n    handleSubmit() {\n      const selectedDate = moment(this.startDate).format('YYYY-MM-DD');\n      const time = moment(this.startTime);\n      const selectedTime = moment(this.startDate);\n      selectedTime.set({\n        hour: time.hour(),\n        minute: time.minutes(),\n        second: 0,\n        millisecond: 0\n      });\n      const availableCourts = [];\n      // Use scraped data due to one hour restriction\n      for (const court of this.courts.data) {\n        const {\n          availability: {\n            count\n          }\n        } = this.getAvailability(court, selectedDate, selectedTime);\n        if (count > 0) {\n          availableCourts.push({\n            court,\n            count\n          });\n        }\n      }\n      this.availableCourts = availableCourts;\n    }\n  }\n};","map":{"version":3,"names":["moment","mapState","CourtAvailabilityMixin","name","mixins","data","startDate","startTime","availableCourts","hourOptions","Array","from","length","map","_","i","computed","submitDisabled","watch","val","newTime","oldTime","$refs","timepicker","closePopup","methods","disabledDate","date","todayStart","subtract","endOf","limit","add","startOf","disabledTime","isToday","diff","toDate","handleSubmit","selectedDate","format","time","selectedTime","set","hour","minute","minutes","second","millisecond","court","courts","availability","count","getAvailability","push"],"sources":["src/components/SearchModal.vue"],"sourcesContent":["<template>\n  <modal name=\"search-modal\" :width=\"300\" :height=\"560\">\n    <button class=\"btn-cancel\" @click=\"() => $modal.hide('search-modal')\">\n      <font-awesome-icon icon=\"fa-solid fa-xmark\" />\n    </button>\n    <div class=\"prompt-content\">\n      <div>\n        <h1 v-if=\"!availableCourts\">Search Available Courts</h1>\n        <h1 v-else>\n          Results for {{ startDate | displayDate }} {{ startTime | displayDate('hh:mm A')}}\n        </h1>\n        <template v-if=\"!availableCourts\">\n          <label>Select date</label>\n          <date-picker v-model=\"startDate\" placeholder=\"YYYY-MM-DD\" type=\"date\" :disabled-date=\"disabledDate\" class=\"date-picker\"></date-picker>\n          <label>Select time</label>\n          <date-picker v-model=\"startTime\" ref=\"timepicker\" placeholder=\"HH:mm\" :hour-options=\"hourOptions\" confirm type=\"time\" format=\"HH:mm\" :minute-step=\"10\" :disabled-time=\"disabledTime\" class=\"date-picker\"></date-picker>\n        </template>\n        <template v-else>\n          <p v-if=\"availableCourts.length === 0\">\n            No courts available at this time\n          </p>\n          <ul v-else class=\"available-court-list\">\n            <li v-for=\"(courtData, idx) in availableCourts\" :key=\"idx\">\n              <div>{{ courtData.count }} of {{ courtData.court.courtNum }}</div>\n              <div>{{ courtData.court.name }}</div>\n            </li>\n          </ul>\n        </template>\n      </div>\n      <div>\n        <button v-if=\"!availableCourts\" class=\"btn-action\" :disabled=\"submitDisabled\" @click=\"handleSubmit\">\n          Search\n        </button>\n        <button v-else class=\"btn-action\" @click=\"() => availableCourts = null\">\n          Search again\n        </button>\n      </div>\n    </div>\n  </modal>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapState } from 'vuex';\nimport CourtAvailabilityMixin from '../mixins/court-availability-mixin';\n\nexport default {\n  name: 'SearchModal',\n  mixins: [CourtAvailabilityMixin],\n  data () {\n    return {\n      startDate: null,\n      startTime: null,\n      availableCourts: null,\n      hourOptions: Array.from({ length: 17 }).map((_, i) => i + 7)\n    }\n  },\n  computed: {\n    ...mapState('court', ['courts']),\n    submitDisabled () {\n      return !this.startDate || !this.startTime\n    }\n  },\n  watch: {\n    startDate (val) {\n      this.startTime = null\n    },\n    startTime (newTime, oldTime) {\n      this.$refs.timepicker.closePopup()\n    }\n  },\n  methods: {\n    disabledDate: function (date) {\n      const todayStart = moment().subtract(1, 'days').endOf('day');\n      const limit = moment().add(2, 'days').startOf('day');\n      return date < todayStart || date >= limit;\n    },\n    disabledTime(date) {\n      if(this.startDate) {\n        const isToday = moment().startOf('day').diff(this.startDate, 'days') === 0\n        if (isToday) {\n          return date < moment().add(1, 'hours').toDate()\n        }\n      }\n      return null;\n    },\n    handleSubmit () {\n      const selectedDate = moment(this.startDate).format('YYYY-MM-DD')\n      const time = moment(this.startTime)\n      const selectedTime = moment(this.startDate)\n      selectedTime.set({\n        hour: time.hour(),\n        minute: time.minutes(),\n        second: 0,\n        millisecond: 0\n      })\n\n      const availableCourts = []\n      // Use scraped data due to one hour restriction\n      for (const court of this.courts.data) {\n        const { availability: { count } } = this.getAvailability(court, selectedDate, selectedTime)\n        if (count > 0) {\n          availableCourts.push({ court, count })\n        }\n      }\n      this.availableCourts = availableCourts\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../scss/variable\";\n\n.btn-cancel {\n  font-size: 1.5em;\n  color: #848484;\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin: 10px;\n  border: none;\n  background: transparent;\n}\n.prompt-content {\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  color: black;\n\n  label {\n    margin-bottom: 4px;\n  }\n  h1 {\n    margin-top: 1rem;\n    margin-bottom: 0.8rem;\n    color: $primary;\n    font-size: 1.2em;\n    text-align: center;\n  }\n  p {\n    font-size: 1.1em;\n    color: black;\n    text-align: center;\n  }\n  .btn-action {\n    margin-top: 1.2rem;\n    background: $primary;\n    color: white;\n    padding: 0.8rem 1.2rem;\n    font-size: 1.1em;\n    border: none;\n    border-radius: 8px;\n\n    &:disabled {\n      opacity: 0.3;\n    }\n  }\n  .date-picker {\n    margin-bottom: 8px;\n    width: 100%;\n  }\n  .available-court-list {\n    list-style: none;\n    overflow: scroll;\n    max-height: 340px;\n\n    li {\n      display: grid;\n      grid-template-columns: 60px 1fr;\n      grid-gap: 1rem;\n      padding: 6px 0;\n      border-bottom: 1px solid #FF3464;\n    }\n  }\n}\n</style>"],"mappings":";AA0CA,OAAAA,MAAA;AACA,SAAAC,QAAA;AACA,OAAAC,sBAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAF,sBAAA;EACAG,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;MACAC,eAAA;MACAC,WAAA,EAAAC,KAAA,CAAAC,IAAA;QAAAC,MAAA;MAAA,GAAAC,GAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAf,QAAA;IACAgB,eAAA;MACA,aAAAX,SAAA,UAAAC,SAAA;IACA;EACA;EACAW,KAAA;IACAZ,UAAAa,GAAA;MACA,KAAAZ,SAAA;IACA;IACAA,UAAAa,OAAA,EAAAC,OAAA;MACA,KAAAC,KAAA,CAAAC,UAAA,CAAAC,UAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA,WAAAA,CAAAC,IAAA;MACA,MAAAC,UAAA,GAAA5B,MAAA,GAAA6B,QAAA,YAAAC,KAAA;MACA,MAAAC,KAAA,GAAA/B,MAAA,GAAAgC,GAAA,YAAAC,OAAA;MACA,OAAAN,IAAA,GAAAC,UAAA,IAAAD,IAAA,IAAAI,KAAA;IACA;IACAG,aAAAP,IAAA;MACA,SAAArB,SAAA;QACA,MAAA6B,OAAA,GAAAnC,MAAA,GAAAiC,OAAA,QAAAG,IAAA,MAAA9B,SAAA;QACA,IAAA6B,OAAA;UACA,OAAAR,IAAA,GAAA3B,MAAA,GAAAgC,GAAA,aAAAK,MAAA;QACA;MACA;MACA;IACA;IACAC,aAAA;MACA,MAAAC,YAAA,GAAAvC,MAAA,MAAAM,SAAA,EAAAkC,MAAA;MACA,MAAAC,IAAA,GAAAzC,MAAA,MAAAO,SAAA;MACA,MAAAmC,YAAA,GAAA1C,MAAA,MAAAM,SAAA;MACAoC,YAAA,CAAAC,GAAA;QACAC,IAAA,EAAAH,IAAA,CAAAG,IAAA;QACAC,MAAA,EAAAJ,IAAA,CAAAK,OAAA;QACAC,MAAA;QACAC,WAAA;MACA;MAEA,MAAAxC,eAAA;MACA;MACA,WAAAyC,KAAA,SAAAC,MAAA,CAAA7C,IAAA;QACA;UAAA8C,YAAA;YAAAC;UAAA;QAAA,SAAAC,eAAA,CAAAJ,KAAA,EAAAV,YAAA,EAAAG,YAAA;QACA,IAAAU,KAAA;UACA5C,eAAA,CAAA8C,IAAA;YAAAL,KAAA;YAAAG;UAAA;QACA;MACA;MACA,KAAA5C,eAAA,GAAAA,eAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}