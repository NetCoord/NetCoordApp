{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from \"moment\";\nimport { mapState, mapGetters } from \"vuex\";\nimport ListLoading from \"../components/loading/ListLoading.vue\";\nimport CourtAvailabilityMap from \"../components/home/CourtAvailabilityMap.vue\";\nimport CourtAvailabilityMixin from \"../mixins/court-availability-mixin\";\nexport default {\n  components: {\n    ListLoading,\n    CourtAvailabilityMap\n  },\n  name: \"home\",\n  mixins: [CourtAvailabilityMixin],\n  data() {\n    return {\n      myPosition: null\n    };\n  },\n  computed: {\n    ...mapState(\"court\", [\"courts\"]),\n    ...mapState(\"auth\", [\"profile\"]),\n    ...mapGetters({\n      courtWithTimes: \"court/courtWithTimes\"\n    }),\n    sortedCourts() {\n      if (this.myPosition) {\n        // Sort courts from the closest to farthest\n\n        return this.courts.data.map(court => {\n          return {\n            ...court,\n            distance: this.getDistanceFromPlace(court),\n            ...this.getTodayAvailability(court)\n          };\n        }).sort((a, b) => a.distance > b.distance ? 1 : -1);\n      } else {\n        // Sort courts by last report having 2 or more courts available\n        return [...this.courts.data].sort((a, b) => {\n          if (!a.updatedAt) {\n            return 1;\n          }\n          const isBefore = moment(a.updatedAt).isBefore(b.updatedAt);\n          return isBefore ? 1 : -1;\n        }).map(court => {\n          return {\n            ...court,\n            ...this.getTodayAvailability(court)\n          };\n        });\n      }\n    }\n  },\n  async mounted() {\n    await this.$store.dispatch(\"auth/fetchProfile\");\n    this.myPosition = {\n      latitude: this.profile.lat,\n      longitude: this.profile.lng\n    };\n    this.geolocate();\n  },\n  methods: {\n    goToDetail(court) {\n      this.$router.push({\n        name: \"courtSchedule\",\n        params: {\n          id: court.id\n        }\n      });\n    },\n    geolocate() {\n      // console.log(this.myPosition, \"position\");\n      // navigator.geolocation.getCurrentPosition((position) => {\n      //   this.myPosition = position.coords;\n      //   console.log(this.myPosition, \"position\");\n      // });\n    },\n    getDistanceFromPlace({\n      location\n    }) {\n      const distanceInKm = this.getDistanceFromLatLonInKm(this.myPosition.latitude, this.myPosition.longitude, location.latitude, location.longitude);\n      return distanceInKm * 0.621371; // miles\n    },\n\n    getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n      const R = 6371; // Radius of the earth in km\n      const dLat = this.deg2rad(lat2 - lat1);\n      const dLon = this.deg2rad(lon2 - lon1);\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      const d = R * c; // Distance in km\n      return d;\n    },\n    deg2rad(deg) {\n      return deg * (Math.PI / 180);\n    }\n  }\n};","map":{"version":3,"names":["moment","mapState","mapGetters","ListLoading","CourtAvailabilityMap","CourtAvailabilityMixin","components","name","mixins","data","myPosition","computed","courtWithTimes","sortedCourts","courts","map","court","distance","getDistanceFromPlace","getTodayAvailability","sort","a","b","updatedAt","isBefore","mounted","$store","dispatch","latitude","profile","lat","longitude","lng","geolocate","methods","goToDetail","$router","push","params","id","location","distanceInKm","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","Math","sin","cos","c","atan2","sqrt","d","deg","PI"],"sources":["src/views/Home.vue"],"sourcesContent":["<template>\r\n  <div class=\"home-page\">\r\n    <div class=\"content\">\r\n      <CourtAvailabilityMap :sortedCourt=\"sortedCourts[0]\" />\r\n      <div class=\"t-list\">\r\n        <div class=\"list-head\">\r\n          <span>Available Now</span>\r\n          <span>Park</span>\r\n          <span>Schedule</span>\r\n        </div>\r\n        <div class=\"list-body\">\r\n          <list-loading v-if=\"courts.loading\" />\r\n          <template v-else>\r\n            <div\r\n              style=\"color: #ffffff !important\"\r\n              v-for=\"court in sortedCourts\"\r\n              :key=\"court.id\"\r\n              class=\"list-item\"\r\n            >\r\n              <div @click=\"goToDetail(court)\">\r\n                <span>\r\n                  <template v-if=\"court.isRaining\"\r\n                    ><i class=\"fas fa-cloud-rain\"></i\r\n                  ></template>\r\n                  <template v-else\r\n                    ><span\r\n                      class=\"dot\"\r\n                      :class=\"getFreeCourt(court) > 0 ? 'avail' : 'unavail'\"\r\n                    ></span\r\n                  ></template>\r\n                  {{ getFreeCourt(court) }} of {{ court.courtNum }}\r\n                </span>\r\n                <span>{{ court.name }}</span>\r\n                <template v-if=\"court.availability\">\r\n                  <span\r\n                    v-if=\"\r\n                      court.availability.count === 0 &&\r\n                      court.availability.availableAt\r\n                    \"\r\n                    class=\"small avail\"\r\n                    >Avail at<br />{{\r\n                      court.availability.availableAt | displayDate(\"hh:mm A\")\r\n                    }}</span\r\n                  >\r\n                  <span\r\n                    v-else-if=\"\r\n                      court.availability.count >= 1 &&\r\n                      court.availability.unavailableAt\r\n                    \"\r\n                    class=\"small unavail\"\r\n                    >Unavail at<br />\r\n                    {{\r\n                      court.availability.unavailableAt | displayDate(\"hh:mm A\")\r\n                    }}</span\r\n                  >\r\n                </template>\r\n              </div>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport { mapState, mapGetters } from \"vuex\";\r\nimport ListLoading from \"../components/loading/ListLoading.vue\";\r\nimport CourtAvailabilityMap from \"../components/home/CourtAvailabilityMap.vue\";\r\nimport CourtAvailabilityMixin from \"../mixins/court-availability-mixin\";\r\n\r\nexport default {\r\n  components: { ListLoading, CourtAvailabilityMap },\r\n  name: \"home\",\r\n  mixins: [CourtAvailabilityMixin],\r\n  data() {\r\n    return {\r\n      myPosition: null,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(\"court\", [\"courts\"]),\r\n    ...mapState(\"auth\", [\"profile\"]),\r\n    ...mapGetters({\r\n      courtWithTimes: \"court/courtWithTimes\",\r\n    }),\r\n    sortedCourts() {\r\n      if (this.myPosition) {\r\n        // Sort courts from the closest to farthest\r\n\r\n        return this.courts.data\r\n          .map((court) => {\r\n            return {\r\n              ...court,\r\n              distance: this.getDistanceFromPlace(court),\r\n              ...this.getTodayAvailability(court),\r\n            };\r\n          })\r\n          .sort((a, b) => (a.distance > b.distance ? 1 : -1));\r\n      } else {\r\n        // Sort courts by last report having 2 or more courts available\r\n        return [...this.courts.data]\r\n          .sort((a, b) => {\r\n            if (!a.updatedAt) {\r\n              return 1;\r\n            }\r\n            const isBefore = moment(a.updatedAt).isBefore(b.updatedAt);\r\n            return isBefore ? 1 : -1;\r\n          })\r\n          .map((court) => {\r\n            return {\r\n              ...court,\r\n              ...this.getTodayAvailability(court),\r\n            };\r\n          });\r\n      }\r\n    },\r\n  },\r\n  async mounted() {\r\n    await this.$store.dispatch(\"auth/fetchProfile\");\r\n    this.myPosition = {\r\n      latitude: this.profile.lat,\r\n      longitude: this.profile.lng,\r\n    };\r\n    this.geolocate();\r\n  },\r\n  methods: {\r\n    goToDetail(court) {\r\n      this.$router.push({\r\n        name: \"courtSchedule\",\r\n        params: {\r\n          id: court.id,\r\n        },\r\n      });\r\n    },\r\n    geolocate() {\r\n      // console.log(this.myPosition, \"position\");\r\n      // navigator.geolocation.getCurrentPosition((position) => {\r\n      //   this.myPosition = position.coords;\r\n      //   console.log(this.myPosition, \"position\");\r\n      // });\r\n    },\r\n    getDistanceFromPlace({ location }) {\r\n      const distanceInKm = this.getDistanceFromLatLonInKm(\r\n        this.myPosition.latitude,\r\n        this.myPosition.longitude,\r\n        location.latitude,\r\n        location.longitude\r\n      );\r\n      return distanceInKm * 0.621371; // miles\r\n    },\r\n    getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\r\n      const R = 6371; // Radius of the earth in km\r\n      const dLat = this.deg2rad(lat2 - lat1);\r\n      const dLon = this.deg2rad(lon2 - lon1);\r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(this.deg2rad(lat1)) *\r\n          Math.cos(this.deg2rad(lat2)) *\r\n          Math.sin(dLon / 2) *\r\n          Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const d = R * c; // Distance in km\r\n      return d;\r\n    },\r\n    deg2rad(deg) {\r\n      return deg * (Math.PI / 180);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"src/scss/home.scss\";\r\n</style>\r\n"],"mappings":";AAkEA,OAAAA,MAAA;AACA,SAAAC,QAAA,EAAAC,UAAA;AACA,OAAAC,WAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,sBAAA;AAEA;EACAC,UAAA;IAAAH,WAAA;IAAAC;EAAA;EACAG,IAAA;EACAC,MAAA,GAAAH,sBAAA;EACAI,KAAA;IACA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAV,QAAA;IACA,GAAAA,QAAA;IACA,GAAAC,UAAA;MACAU,cAAA;IACA;IACAC,aAAA;MACA,SAAAH,UAAA;QACA;;QAEA,YAAAI,MAAA,CAAAL,IAAA,CACAM,GAAA,CAAAC,KAAA;UACA;YACA,GAAAA,KAAA;YACAC,QAAA,OAAAC,oBAAA,CAAAF,KAAA;YACA,QAAAG,oBAAA,CAAAH,KAAA;UACA;QACA,GACAI,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAD,CAAA,CAAAJ,QAAA,GAAAK,CAAA,CAAAL,QAAA;MACA;QACA;QACA,gBAAAH,MAAA,CAAAL,IAAA,EACAW,IAAA,EAAAC,CAAA,EAAAC,CAAA;UACA,KAAAD,CAAA,CAAAE,SAAA;YACA;UACA;UACA,MAAAC,QAAA,GAAAxB,MAAA,CAAAqB,CAAA,CAAAE,SAAA,EAAAC,QAAA,CAAAF,CAAA,CAAAC,SAAA;UACA,OAAAC,QAAA;QACA,GACAT,GAAA,CAAAC,KAAA;UACA;YACA,GAAAA,KAAA;YACA,QAAAG,oBAAA,CAAAH,KAAA;UACA;QACA;MACA;IACA;EACA;EACA,MAAAS,QAAA;IACA,WAAAC,MAAA,CAAAC,QAAA;IACA,KAAAjB,UAAA;MACAkB,QAAA,OAAAC,OAAA,CAAAC,GAAA;MACAC,SAAA,OAAAF,OAAA,CAAAG;IACA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAC,WAAAnB,KAAA;MACA,KAAAoB,OAAA,CAAAC,IAAA;QACA9B,IAAA;QACA+B,MAAA;UACAC,EAAA,EAAAvB,KAAA,CAAAuB;QACA;MACA;IACA;IACAN,UAAA;MACA;MACA;MACA;MACA;MACA;IAAA,CACA;IACAf,qBAAA;MAAAsB;IAAA;MACA,MAAAC,YAAA,QAAAC,yBAAA,CACA,KAAAhC,UAAA,CAAAkB,QAAA,EACA,KAAAlB,UAAA,CAAAqB,SAAA,EACAS,QAAA,CAAAZ,QAAA,EACAY,QAAA,CAAAT,SACA;MACA,OAAAU,YAAA;IACA;;IACAC,0BAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;MACA,MAAAC,CAAA;MACA,MAAAC,IAAA,QAAAC,OAAA,CAAAJ,IAAA,GAAAF,IAAA;MACA,MAAAO,IAAA,QAAAD,OAAA,CAAAH,IAAA,GAAAF,IAAA;MACA,MAAAvB,CAAA,GACA8B,IAAA,CAAAC,GAAA,CAAAJ,IAAA,QAAAG,IAAA,CAAAC,GAAA,CAAAJ,IAAA,QACAG,IAAA,CAAAE,GAAA,MAAAJ,OAAA,CAAAN,IAAA,KACAQ,IAAA,CAAAE,GAAA,MAAAJ,OAAA,CAAAJ,IAAA,KACAM,IAAA,CAAAC,GAAA,CAAAF,IAAA,QACAC,IAAA,CAAAC,GAAA,CAAAF,IAAA;MACA,MAAAI,CAAA,OAAAH,IAAA,CAAAI,KAAA,CAAAJ,IAAA,CAAAK,IAAA,CAAAnC,CAAA,GAAA8B,IAAA,CAAAK,IAAA,KAAAnC,CAAA;MACA,MAAAoC,CAAA,GAAAV,CAAA,GAAAO,CAAA;MACA,OAAAG,CAAA;IACA;IACAR,QAAAS,GAAA;MACA,OAAAA,GAAA,IAAAP,IAAA,CAAAQ,EAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}