{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'court-availability-time-chart',\n  props: {\n    court: {\n      type: Object\n    },\n    courtNum: {\n      type: Number\n    }\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    ...mapGetters({\n      courtWithTimes: 'court/courtWithTimes'\n    }),\n    courtNumAvailability() {\n      const courtNumTimes = this.courtWithTimes[this.court.id] ? this.courtWithTimes[this.court.id][this.courtNum] : [];\n      const today = moment().format('YYYY-MM-DD');\n      const todayAvailability = courtNumTimes.find(record => record.date === today);\n      return todayAvailability?.available_times?.filter(({\n        availability\n      }) => availability === 'Available') || [];\n    },\n    courtHours() {\n      const start = moment({\n        hour: 7\n      });\n      const end = moment({\n        hour: 23\n      });\n      const hours = [];\n      while (start <= end) {\n        hours.push(start.toDate());\n        start.add(1, 'hours');\n      }\n      return hours;\n    }\n  },\n  methods: {\n    getFillStyle(hour) {\n      const hourEnd = moment(hour).add(1, 'hours');\n      let isHourAvailable = false;\n      let startFound = null;\n      let endFound = null;\n      this.courtNumAvailability.every(({\n        end_time,\n        start_time\n      }) => {\n        const today = moment().format('YYYY-MM-DD');\n        const startTime = moment(today + ' ' + start_time);\n        const endTime = moment(today + ' ' + end_time);\n        if (moment(hour).isBetween(startTime, endTime, undefined, '[]') || moment(hourEnd).isBetween(startTime, endTime, undefined, '(]')) {\n          isHourAvailable = true;\n          startFound = startTime;\n          endFound = endTime;\n          return false;\n        }\n        return true;\n      });\n      if (!isHourAvailable) {\n        return {};\n      }\n\n      // Determine left fill percentage\n      let left = 0;\n      if (startFound.isAfter(hour)) {\n        const mins = startFound.minutes();\n        left = mins / 60 * 100;\n      }\n\n      // Determine width fill percentage\n      let width = 0;\n      const duration = moment.duration(endFound.diff(startFound));\n      const diffMinutes = duration.asMinutes();\n      width = diffMinutes > 60 ? 100 : diffMinutes / 60 * 100;\n      return {\n        width: `${width}%`,\n        left: `${left}%`\n      };\n    }\n  }\n};","map":{"version":3,"names":["moment","mapGetters","name","props","court","type","Object","courtNum","Number","data","computed","courtWithTimes","courtNumAvailability","courtNumTimes","id","today","format","todayAvailability","find","record","date","available_times","filter","availability","courtHours","start","hour","end","hours","push","toDate","add","methods","getFillStyle","hourEnd","isHourAvailable","startFound","endFound","every","end_time","start_time","startTime","endTime","isBetween","undefined","left","isAfter","mins","minutes","width","duration","diff","diffMinutes","asMinutes"],"sources":["src/components/CourtAvailabilityTimeChart.vue"],"sourcesContent":["<template>\n  <div class=\"chart\">\n    <div class=\"timeslot\">\n      <div v-for=\"(hour, idx) in courtHours\" :key=\"idx\">\n        {{ hour | displayTime }}\n      </div>\n    </div>\n    <div class=\"timeslot\">\n      <div v-for=\"(hour, idx) in courtHours\" :key=\"idx\" class=\"available-slot\">\n        <div class=\"fill\" :style=\"getFillStyle(hour)\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'court-availability-time-chart',\n  props: {\n    court: {\n      type: Object\n    },\n    courtNum: {\n      type: Number\n    }\n  },\n  data () {\n    return {\n    }\n  },\n  computed: {\n    ...mapGetters({\n      courtWithTimes: 'court/courtWithTimes',\n    }),\n    courtNumAvailability () {\n      const courtNumTimes = this.courtWithTimes[this.court.id] ? this.courtWithTimes[this.court.id][this.courtNum] : []\n      const today = moment().format('YYYY-MM-DD')\n      const todayAvailability = courtNumTimes.find(record => record.date === today)\n      return todayAvailability?.available_times?.filter(({ availability }) => availability === 'Available') || []\n    },\n    courtHours () {\n      const start = moment({hour: 7})\n      const end = moment({hour: 23})\n\n      const hours = []\n      while(start <= end) {\n        hours.push(start.toDate())\n        start.add(1, 'hours');\n      }\n      return hours\n    }\n  },\n  methods: {\n    getFillStyle (hour) {\n      const hourEnd = moment(hour).add(1, 'hours');\n\n      let isHourAvailable = false;\n      let startFound = null;\n      let endFound = null;\n\n      this.courtNumAvailability.every(({ end_time, start_time }) => {\n        const today = moment().format('YYYY-MM-DD')\n        const startTime = moment(today + ' ' + start_time);\n        const endTime = moment(today + ' ' + end_time);\n\n        if(moment(hour).isBetween(startTime, endTime, undefined, '[]') ||\n          moment(hourEnd).isBetween(startTime, endTime, undefined, '(]')\n        ) {\n          isHourAvailable = true;\n          startFound = startTime;\n          endFound = endTime;\n          return false;\n        }\n        return true;\n      })\n\n      if (!isHourAvailable) {\n        return {}\n      }\n\n      // Determine left fill percentage\n      let left = 0;\n      if (startFound.isAfter(hour)) {\n        const mins = startFound.minutes();\n        left = mins / 60 * 100;\n      }\n\n      // Determine width fill percentage\n      let width = 0;\n      const duration = moment.duration(endFound.diff(startFound));\n      const diffMinutes = duration.asMinutes()\n      width = diffMinutes > 60 ? 100 : (diffMinutes / 60 * 100);\n    \n      return {\n        width: `${width}%`,\n        left: `${left}%`\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../scss/variable\";\n\n.chart {\n  margin: 1rem 0;\n  overflow-x: scroll;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n}\n.timeslot {\n  width: 100%;\n  display: grid;\n  grid-auto-columns: minmax(40px, 1fr);\n  grid-auto-flow: column;\n\n  & > div {\n    text-align: center;\n    background: black;\n    padding: 4px 0;\n  }\n  & > * + * {\n    border-left: 1px solid grey;\n  }\n\n  .available-slot {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    position: relative;\n  \n    .fill {\n      position: absolute;\n      background-color: #60fb60;\n      height: 100%;\n      left: 0;\n      width: 0;\n    }\n  }\n}\n</style>"],"mappings":";AAgBA,OAAAA,MAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC;IACA;IACAC,QAAA;MACAF,IAAA,EAAAG;IACA;EACA;EACAC,KAAA;IACA,QACA;EACA;EACAC,QAAA;IACA,GAAAT,UAAA;MACAU,cAAA;IACA;IACAC,qBAAA;MACA,MAAAC,aAAA,QAAAF,cAAA,MAAAP,KAAA,CAAAU,EAAA,SAAAH,cAAA,MAAAP,KAAA,CAAAU,EAAA,OAAAP,QAAA;MACA,MAAAQ,KAAA,GAAAf,MAAA,GAAAgB,MAAA;MACA,MAAAC,iBAAA,GAAAJ,aAAA,CAAAK,IAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAC,IAAA,KAAAL,KAAA;MACA,OAAAE,iBAAA,EAAAI,eAAA,EAAAC,MAAA;QAAAC;MAAA,MAAAA,YAAA;IACA;IACAC,WAAA;MACA,MAAAC,KAAA,GAAAzB,MAAA;QAAA0B,IAAA;MAAA;MACA,MAAAC,GAAA,GAAA3B,MAAA;QAAA0B,IAAA;MAAA;MAEA,MAAAE,KAAA;MACA,OAAAH,KAAA,IAAAE,GAAA;QACAC,KAAA,CAAAC,IAAA,CAAAJ,KAAA,CAAAK,MAAA;QACAL,KAAA,CAAAM,GAAA;MACA;MACA,OAAAH,KAAA;IACA;EACA;EACAI,OAAA;IACAC,aAAAP,IAAA;MACA,MAAAQ,OAAA,GAAAlC,MAAA,CAAA0B,IAAA,EAAAK,GAAA;MAEA,IAAAI,eAAA;MACA,IAAAC,UAAA;MACA,IAAAC,QAAA;MAEA,KAAAzB,oBAAA,CAAA0B,KAAA;QAAAC,QAAA;QAAAC;MAAA;QACA,MAAAzB,KAAA,GAAAf,MAAA,GAAAgB,MAAA;QACA,MAAAyB,SAAA,GAAAzC,MAAA,CAAAe,KAAA,SAAAyB,UAAA;QACA,MAAAE,OAAA,GAAA1C,MAAA,CAAAe,KAAA,SAAAwB,QAAA;QAEA,IAAAvC,MAAA,CAAA0B,IAAA,EAAAiB,SAAA,CAAAF,SAAA,EAAAC,OAAA,EAAAE,SAAA,WACA5C,MAAA,CAAAkC,OAAA,EAAAS,SAAA,CAAAF,SAAA,EAAAC,OAAA,EAAAE,SAAA,SACA;UACAT,eAAA;UACAC,UAAA,GAAAK,SAAA;UACAJ,QAAA,GAAAK,OAAA;UACA;QACA;QACA;MACA;MAEA,KAAAP,eAAA;QACA;MACA;;MAEA;MACA,IAAAU,IAAA;MACA,IAAAT,UAAA,CAAAU,OAAA,CAAApB,IAAA;QACA,MAAAqB,IAAA,GAAAX,UAAA,CAAAY,OAAA;QACAH,IAAA,GAAAE,IAAA;MACA;;MAEA;MACA,IAAAE,KAAA;MACA,MAAAC,QAAA,GAAAlD,MAAA,CAAAkD,QAAA,CAAAb,QAAA,CAAAc,IAAA,CAAAf,UAAA;MACA,MAAAgB,WAAA,GAAAF,QAAA,CAAAG,SAAA;MACAJ,KAAA,GAAAG,WAAA,cAAAA,WAAA;MAEA;QACAH,KAAA,KAAAA,KAAA;QACAJ,IAAA,KAAAA,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}