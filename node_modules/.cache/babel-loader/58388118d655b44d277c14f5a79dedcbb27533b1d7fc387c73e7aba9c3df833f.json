{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nimport { auth } from \"../firebase\";\nimport ToggleGrid from \"@/components/ToggleGrid\";\nimport { firebase, firestore } from \"../firebase\";\nimport getCoordinates from \"../utils/locationGeoLocation\";\nexport default {\n  name: \"Profile\",\n  data() {\n    return {\n      zipCodeError: \"\",\n      selectedSport: \"\",\n      loading: true,\n      loggingOut: false,\n      editedProfile: null,\n      originalProfile: null,\n      hasChanges: false,\n      updating: false,\n      sportOptions: [{\n        label: \"Tennis\",\n        value: \"Tennis\"\n      }, {\n        label: \"Pickleball\",\n        value: \"Pickleball\"\n      }]\n    };\n  },\n  components: {\n    ToggleGrid\n  },\n  computed: {\n    ...mapState(\"auth\", [\"profile\"])\n  },\n  async mounted() {\n    await this.$store.dispatch(\"auth/fetchProfile\");\n    this.loading = false;\n    this.initializeProfile();\n  },\n  methods: {\n    initializeProfile() {\n      // Create a deep copy of the profile object to store the edited version\n      this.editedProfile = JSON.parse(JSON.stringify(this.profile));\n      // Store the original profile for comparison\n      this.originalProfile = JSON.parse(JSON.stringify(this.profile));\n      this.selectedSport = this.originalProfile.sport;\n    },\n    handleSelectSport(sport) {\n      this.editedProfile.sport = sport;\n      this.selectedSport = sport;\n      this.checkChanges();\n    },\n    checkChanges() {\n      // Compare the edited profile with the original profile to determine if there are any changes\n      this.hasChanges = JSON.stringify(this.editedProfile) !== JSON.stringify(this.originalProfile);\n    },\n    async updateProfile() {\n      // Perform the profile update logic here\n      // You can access the edited profile using this.editedProfile\n      // Once the update is successful, you can reset the original profile and clear the hasChanges flag\n      this.updating = true;\n      const cordinates = await getCoordinates(this.editedProfile.zipCode);\n      if (this.editedProfile.zipCode) {\n        if (!cordinates) {\n          this.zipCodeError = \"Invalid ZIP code format.\";\n          this.updating = false;\n          return;\n        }\n      } else {\n        this.zipCodeError = \"Please update your Zip code to save\";\n        this.updating = false;\n        return;\n      }\n      this.zipCodeError = \"\";\n      const {\n        email,\n        name,\n        sport,\n        zipCode,\n        id\n      } = JSON.parse(JSON.stringify(this.editedProfile));\n      this.editedProfile.address = cordinates.address;\n      const payload = {\n        email,\n        name,\n        sport,\n        zipCode,\n        address: cordinates.address,\n        lng: cordinates.lng,\n        lat: cordinates.lat\n      };\n      let updater = await firestore.collection(\"users\").doc(id).update({\n        ...payload,\n        updatedAt: firebase.firestore.FieldValue.serverTimestamp()\n      });\n      this.originalProfile = JSON.parse(JSON.stringify(this.editedProfile));\n      this.hasChanges = false;\n    },\n    async handleLogout() {\n      this.loggingOut = true;\n      await auth.signOut();\n      this.loggingOut = false;\n      this.$router.push({\n        name: \"login\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapState","auth","ToggleGrid","firebase","firestore","getCoordinates","name","data","zipCodeError","selectedSport","loading","loggingOut","editedProfile","originalProfile","hasChanges","updating","sportOptions","label","value","components","computed","mounted","$store","dispatch","initializeProfile","methods","JSON","parse","stringify","profile","sport","handleSelectSport","checkChanges","updateProfile","cordinates","zipCode","email","id","address","payload","lng","lat","updater","collection","doc","update","updatedAt","FieldValue","serverTimestamp","handleLogout","signOut","$router","push"],"sources":["src/views/Profile.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 class=\"heading\">My Profile</h1>\n    <moon-loader v-if=\"loading\" color=\"white\" class=\"fixed-center\" />\n    <div v-else>\n      <section class=\"profile-section\">\n        <div class=\"list-item\">\n          <font-awesome-icon icon=\"fa-solid fa-user\" />\n          <p>Name</p>\n          <span>{{ editedProfile.name }}</span>\n        </div>\n        <div class=\"separator\" />\n        <div class=\"list-item\">\n          <font-awesome-icon icon=\"fa-solid fa-envelope\" />\n          <p>Email</p>\n          <span>{{ editedProfile.email }}</span>\n        </div>\n\n        <div class=\"separator\" />\n        <div class=\"list-item\">\n          <font-awesome-icon icon=\"fa-solid fa-medal\" />\n          <p>Sport</p>\n          <ToggleGrid\n            :options=\"sportOptions\"\n            :selectedOption=\"selectedSport\"\n            @selected=\"(opt) => handleSelectSport(opt)\"\n          />\n          <!-- <input v-model=\"editedProfile.sport\" @input=\"checkChanges\" /> -->\n        </div>\n        <div class=\"separator\" />\n        <div class=\"list-item\">\n          <font-awesome-icon icon=\"fa-solid fa-map-pin\" />\n          <p>Zip code</p>\n          <input\n            v-model=\"editedProfile.zipCode\"\n            @input=\"checkChanges\"\n            type=\"text\"\n            placeholder=\"Enter ZIP code\"\n          />\n          <span v-if=\"zipCodeError\" class=\"error-message\">{{\n            zipCodeError\n          }}</span>\n        </div>\n        <div class=\"separator\" />\n        <!-- <div class=\"list-item\">\n          <font-awesome-icon icon=\"fa-solid fa-home-user\" />\n          <p>Address:</p>\n          <span>{{ editedProfile.address }}</span>\n        </div> -->\n      </section>\n      <section class=\"logout-section\">\n        <button class=\"btn-update\" v-show=\"hasChanges\" @click=\"updateProfile\">\n          <moon-loader v-if=\"updating\" size=\"13px\" color=\"white\" />\n          Update Profile\n        </button>\n        <button class=\"btn-logout\" @click=\"handleLogout\" :disabled=\"loggingOut\">\n          <moon-loader v-if=\"loggingOut\" size=\"13px\" color=\"white\" />\n          <span v-else>Logout</span>\n        </button>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport { auth } from \"../firebase\";\nimport ToggleGrid from \"@/components/ToggleGrid\";\nimport { firebase, firestore } from \"../firebase\";\nimport getCoordinates from \"../utils/locationGeoLocation\";\n\nexport default {\n  name: \"Profile\",\n  data() {\n    return {\n      zipCodeError: \"\",\n      selectedSport: \"\",\n      loading: true,\n      loggingOut: false,\n      editedProfile: null,\n      originalProfile: null,\n      hasChanges: false,\n      updating: false,\n      sportOptions: [\n        { label: \"Tennis\", value: \"Tennis\" },\n        { label: \"Pickleball\", value: \"Pickleball\" },\n      ],\n    };\n  },\n\n  components: { ToggleGrid },\n  computed: {\n    ...mapState(\"auth\", [\"profile\"]),\n  },\n  async mounted() {\n    await this.$store.dispatch(\"auth/fetchProfile\");\n    this.loading = false;\n    this.initializeProfile();\n  },\n\n  methods: {\n    initializeProfile() {\n      // Create a deep copy of the profile object to store the edited version\n      this.editedProfile = JSON.parse(JSON.stringify(this.profile));\n      // Store the original profile for comparison\n      this.originalProfile = JSON.parse(JSON.stringify(this.profile));\n      this.selectedSport = this.originalProfile.sport;\n    },\n\n    handleSelectSport(sport) {\n      this.editedProfile.sport = sport;\n      this.selectedSport = sport;\n      this.checkChanges();\n    },\n    checkChanges() {\n      // Compare the edited profile with the original profile to determine if there are any changes\n      this.hasChanges =\n        JSON.stringify(this.editedProfile) !==\n        JSON.stringify(this.originalProfile);\n    },\n\n    async updateProfile() {\n      // Perform the profile update logic here\n      // You can access the edited profile using this.editedProfile\n      // Once the update is successful, you can reset the original profile and clear the hasChanges flag\n      this.updating = true;\n      const cordinates = await getCoordinates(this.editedProfile.zipCode);\n      if (this.editedProfile.zipCode) {\n        if (!cordinates) {\n          this.zipCodeError = \"Invalid ZIP code format.\";\n          this.updating = false;\n          return;\n        }\n      } else {\n        this.zipCodeError = \"Please update your Zip code to save\";\n        this.updating = false;\n        return;\n      }\n\n      this.zipCodeError = \"\";\n      const { email, name, sport, zipCode, id } = JSON.parse(\n        JSON.stringify(this.editedProfile)\n      );\n      this.editedProfile.address = cordinates.address;\n      const payload = {\n        email,\n        name,\n        sport,\n        zipCode,\n        address: cordinates.address,\n        lng: cordinates.lng,\n        lat: cordinates.lat,\n      };\n      let updater = await firestore\n        .collection(\"users\")\n        .doc(id)\n        .update({\n          ...payload,\n          updatedAt: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n      this.originalProfile = JSON.parse(JSON.stringify(this.editedProfile));\n      this.hasChanges = false;\n    },\n    async handleLogout() {\n      this.loggingOut = true;\n      await auth.signOut();\n      this.loggingOut = false;\n\n      this.$router.push({\n        name: \"login\",\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../scss/variable\";\n\n.heading {\n  text-align: center;\n  font-size: 1.3em;\n  margin-bottom: 1rem;\n}\n\n.profile-section,\n.rsvp-section {\n  background: rgb(218, 217, 217);\n  padding: 0 1rem;\n\n  .separator {\n    height: 1px;\n    width: 100%;\n    background-color: $primary;\n  }\n}\n\n.logout-section {\n  margin-top: 2rem;\n}\n\n.rsvp-section {\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n\n  .badge {\n    width: 1.5rem;\n    height: 1.5rem;\n    background-color: $primary;\n    border-radius: 50%;\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.list-item {\n  display: grid;\n  grid-template-columns: 1.25rem 5rem 1fr auto;\n  grid-gap: 1rem;\n  gap: 1rem;\n  color: $primary;\n  padding: 0.6rem;\n  align-items: center;\n\n  input {\n    min-height: 40px;\n    background: hsla(0, 0%, 100%, 0.4);\n    padding: 0 0.5rem;\n    font-size: 1em;\n    border: none;\n    transition: 0.07s;\n  }\n\n  p {\n    font-weight: 600;\n    color: black;\n  }\n  span {\n    font-size: 0.9em;\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  button {\n    background: transparent;\n    border: none;\n    font-weight: 500;\n    color: $primary;\n  }\n  .dot-wrapper {\n    display: grid;\n    grid-template-columns: repeat(6, auto);\n    grid-gap: 0.8rem;\n    gap: 0.8rem;\n    width: fit-content;\n    align-items: center;\n  }\n  .dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: $primary;\n  }\n}\n.btn-logout {\n  border: 2px solid $primary;\n  border-radius: 2rem;\n  background: transparent;\n  color: $primary;\n  padding: 0.6rem 3rem;\n  margin: 0 auto;\n  display: flex;\n  font-size: 0.9em;\n  min-height: 2.5rem;\n}\n\n.btn-update {\n  border: 2px solid $primary;\n  border-radius: 2rem;\n  background: transparent;\n  color: $primary;\n  padding: 0.6rem 3rem;\n  margin: 0 auto;\n  display: flex;\n  font-size: 0.9em;\n  min-height: 2.5rem;\n\n  margin-bottom: 10px;\n}\n\n.error-message {\n  color: red;\n  font-size: 15px;\n  grid-column-start: 3;\n  grid-column-end: 5;\n}\n</style>\n"],"mappings":";AAiEA,SAAAA,QAAA;AACA,SAAAC,IAAA;AACA,OAAAC,UAAA;AACA,SAAAC,QAAA,EAAAC,SAAA;AACA,OAAAC,cAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,aAAA;MACAC,OAAA;MACAC,UAAA;MACAC,aAAA;MACAC,eAAA;MACAC,UAAA;MACAC,QAAA;MACAC,YAAA,GACA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,KAAA;MAAA;IAEA;EACA;EAEAC,UAAA;IAAAjB;EAAA;EACAkB,QAAA;IACA,GAAApB,QAAA;EACA;EACA,MAAAqB,QAAA;IACA,WAAAC,MAAA,CAAAC,QAAA;IACA,KAAAb,OAAA;IACA,KAAAc,iBAAA;EACA;EAEAC,OAAA;IACAD,kBAAA;MACA;MACA,KAAAZ,aAAA,GAAAc,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,MAAAC,OAAA;MACA;MACA,KAAAhB,eAAA,GAAAa,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,MAAAC,OAAA;MACA,KAAApB,aAAA,QAAAI,eAAA,CAAAiB,KAAA;IACA;IAEAC,kBAAAD,KAAA;MACA,KAAAlB,aAAA,CAAAkB,KAAA,GAAAA,KAAA;MACA,KAAArB,aAAA,GAAAqB,KAAA;MACA,KAAAE,YAAA;IACA;IACAA,aAAA;MACA;MACA,KAAAlB,UAAA,GACAY,IAAA,CAAAE,SAAA,MAAAhB,aAAA,MACAc,IAAA,CAAAE,SAAA,MAAAf,eAAA;IACA;IAEA,MAAAoB,cAAA;MACA;MACA;MACA;MACA,KAAAlB,QAAA;MACA,MAAAmB,UAAA,SAAA7B,cAAA,MAAAO,aAAA,CAAAuB,OAAA;MACA,SAAAvB,aAAA,CAAAuB,OAAA;QACA,KAAAD,UAAA;UACA,KAAA1B,YAAA;UACA,KAAAO,QAAA;UACA;QACA;MACA;QACA,KAAAP,YAAA;QACA,KAAAO,QAAA;QACA;MACA;MAEA,KAAAP,YAAA;MACA;QAAA4B,KAAA;QAAA9B,IAAA;QAAAwB,KAAA;QAAAK,OAAA;QAAAE;MAAA,IAAAX,IAAA,CAAAC,KAAA,CACAD,IAAA,CAAAE,SAAA,MAAAhB,aAAA,CACA;MACA,KAAAA,aAAA,CAAA0B,OAAA,GAAAJ,UAAA,CAAAI,OAAA;MACA,MAAAC,OAAA;QACAH,KAAA;QACA9B,IAAA;QACAwB,KAAA;QACAK,OAAA;QACAG,OAAA,EAAAJ,UAAA,CAAAI,OAAA;QACAE,GAAA,EAAAN,UAAA,CAAAM,GAAA;QACAC,GAAA,EAAAP,UAAA,CAAAO;MACA;MACA,IAAAC,OAAA,SAAAtC,SAAA,CACAuC,UAAA,UACAC,GAAA,CAAAP,EAAA,EACAQ,MAAA;QACA,GAAAN,OAAA;QACAO,SAAA,EAAA3C,QAAA,CAAAC,SAAA,CAAA2C,UAAA,CAAAC,eAAA;MACA;MACA,KAAAnC,eAAA,GAAAa,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,SAAA,MAAAhB,aAAA;MACA,KAAAE,UAAA;IACA;IACA,MAAAmC,aAAA;MACA,KAAAtC,UAAA;MACA,MAAAV,IAAA,CAAAiD,OAAA;MACA,KAAAvC,UAAA;MAEA,KAAAwC,OAAA,CAAAC,IAAA;QACA9C,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}