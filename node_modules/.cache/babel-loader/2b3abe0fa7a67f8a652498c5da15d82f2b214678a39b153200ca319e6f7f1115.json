{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapGetters } from 'vuex';\nimport moment from 'moment';\nexport default {\n  name: \"UpcomingEventsList\",\n  data() {\n    return {\n      loading: false,\n      events: []\n    };\n  },\n  mounted() {\n    this.fetchAllEvents();\n  },\n  computed: {\n    ...mapState('court', ['courts']),\n    ...mapGetters({\n      courtIdToName: 'court/courtIdToName'\n    }),\n    groupedEvents() {\n      let groups = {};\n      for (const event of this.events) {\n        const dateStr = moment(event.startTime.toDate()).format('YYYY-MM-DD');\n        if (!(dateStr in groups)) {\n          groups[dateStr] = [];\n        }\n        groups[dateStr].push(event);\n      }\n      return groups;\n    }\n  },\n  methods: {\n    async fetchAllEvents() {\n      this.loading = true;\n      const events = await this.$store.dispatch('court/fetchAllEvents');\n      const today = moment();\n      const upcomingEvents = events.filter(({\n        startTime\n      }) => today.isBefore(startTime.toDate()));\n      this.events = upcomingEvents;\n      this.loading = false;\n    },\n    getCourtNames(event) {\n      return Object.keys(event.courtDetails).map(id => this.courtIdToName[id]).filter(name => name).join(', ');\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","moment","name","data","loading","events","mounted","fetchAllEvents","computed","courtIdToName","groupedEvents","groups","event","dateStr","startTime","toDate","format","push","methods","$store","dispatch","today","upcomingEvents","filter","isBefore","getCourtNames","Object","keys","courtDetails","map","id","join"],"sources":["src/components/UpcomingEventsList.vue"],"sourcesContent":["<template>\n  <div class=\"events-list\">\n    <div class=\"events-list_row events-list_header\">\n      <span>Park</span>\n      <span>Event Name</span>\n      <span>Sport</span>\n      <span>When</span>\n    </div>\n    <moon-loader v-if=\"loading\" color=\"white\" class=\"fixed-center\" />\n    <template v-else>\n      <div v-if=\"!events.length\" class=\"events-list_empty\">\n        No events scheduled for today\n      </div>\n      <div v-else>\n        <div v-for=\"groupEventDate in Object.keys(groupedEvents)\" :key=\"groupEventDate\">\n          <div class=\"events-list_separator\">{{ groupEventDate | displayDate('dddd MMMM Do, YYYY') }}</div>\n          <div v-for=\"(event, idx) in groupedEvents[groupEventDate]\" :key=\"idx\" class=\"events-list_row\">\n            <span>{{ getCourtNames(event) }}</span>\n            <span>{{ event.name }}</span>\n            <span class=\"highlight\">{{ event.sport | displayShortSport }}</span>\n            <span>{{ event.startTime.toDate() | displayDate('hh:mm A') }}</span>\n          </div>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters } from 'vuex';\nimport moment from 'moment';\n\nexport default {\n  name: \"UpcomingEventsList\",\n  data () {\n    return {\n      loading: false,\n      events: []\n    }\n  },\n  mounted () {\n    this.fetchAllEvents()\n  },\n  computed: {\n    ...mapState('court', ['courts']),\n    ...mapGetters({\n      courtIdToName: 'court/courtIdToName',\n    }),\n    groupedEvents () {\n      let groups = {}\n\n      for(const event of this.events) {\n        const dateStr = moment(event.startTime.toDate()).format('YYYY-MM-DD')\n        if(!(dateStr in groups)) {\n          groups[dateStr] = []\n        }\n        groups[dateStr].push(event)\n      }\n      return groups;\n    }\n  },\n  methods: {\n    async fetchAllEvents() {\n      this.loading = true\n      const events = await this.$store.dispatch('court/fetchAllEvents')\n\n      const today = moment()\n      const upcomingEvents = events.filter(({ startTime }) =>\n        today.isBefore(startTime.toDate())\n      )\n      this.events = upcomingEvents;\n      this.loading = false\n    },\n    getCourtNames (event) {\n      return Object.keys(event.courtDetails)\n        .map(id => this.courtIdToName[id])\n        .filter(name => name)\n        .join(', ')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../scss/variable\";\n\n.events-list {\n  padding: 0.4rem;\n\n  &_row {\n    display: grid;\n    grid-template-columns: 100px 1fr 40px 46px;\n    grid-gap: 8px;\n    gap: 8px;\n    border-bottom: 1px solid $primary;\n    padding: 8px 0px;\n\n    span {\n      overflow: hidden;\n      white-space: pre-line;\n      text-overflow: ellipsis;\n\n      &.highlight {\n        color: $primary;\n      }\n      &:nth-of-type(3) {\n        text-align: center;\n      }\n      &:nth-of-type(4) {\n        text-align: right;\n      }\n    }\n  }\n  &_header {\n    color: $primary;\n    font-weight: 500;\n  }\n  &_empty {\n    margin-top: 8px;\n    text-align: center;\n  }\n  &_separator {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: $primary;\n    padding: 2px;\n  }\n}\n</style>"],"mappings":";AA6BA,SAAAA,QAAA,EAAAC,UAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,cAAA;EACA;EACAC,QAAA;IACA,GAAAT,QAAA;IACA,GAAAC,UAAA;MACAS,aAAA;IACA;IACAC,cAAA;MACA,IAAAC,MAAA;MAEA,WAAAC,KAAA,SAAAP,MAAA;QACA,MAAAQ,OAAA,GAAAZ,MAAA,CAAAW,KAAA,CAAAE,SAAA,CAAAC,MAAA,IAAAC,MAAA;QACA,MAAAH,OAAA,IAAAF,MAAA;UACAA,MAAA,CAAAE,OAAA;QACA;QACAF,MAAA,CAAAE,OAAA,EAAAI,IAAA,CAAAL,KAAA;MACA;MACA,OAAAD,MAAA;IACA;EACA;EACAO,OAAA;IACA,MAAAX,eAAA;MACA,KAAAH,OAAA;MACA,MAAAC,MAAA,cAAAc,MAAA,CAAAC,QAAA;MAEA,MAAAC,KAAA,GAAApB,MAAA;MACA,MAAAqB,cAAA,GAAAjB,MAAA,CAAAkB,MAAA;QAAAT;MAAA,MACAO,KAAA,CAAAG,QAAA,CAAAV,SAAA,CAAAC,MAAA,GACA;MACA,KAAAV,MAAA,GAAAiB,cAAA;MACA,KAAAlB,OAAA;IACA;IACAqB,cAAAb,KAAA;MACA,OAAAc,MAAA,CAAAC,IAAA,CAAAf,KAAA,CAAAgB,YAAA,EACAC,GAAA,CAAAC,EAAA,SAAArB,aAAA,CAAAqB,EAAA,GACAP,MAAA,CAAArB,IAAA,IAAAA,IAAA,EACA6B,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}