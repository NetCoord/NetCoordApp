{"ast":null,"code":"const rad2degr = rad => rad * 180 / Math.PI;\nconst degr2rad = degr => degr * Math.PI / 180;\n\n/**\n * @param latLngInDeg array of arrays with latitude and longtitude\n *   pairs in degrees. e.g. [[latitude1, longtitude1], [latitude2\n *   [longtitude2] ...]\n *\n * @return array with the center latitude longtitude pairs in \n *   degrees.\n */\nconst getLatLngCenter = latLngInDegr => {\n  var LATIDX = 0;\n  var LNGIDX = 1;\n  var sumX = 0;\n  var sumY = 0;\n  var sumZ = 0;\n  for (var i = 0; i < latLngInDegr.length; i++) {\n    var lat = degr2rad(latLngInDegr[i][LATIDX]);\n    var lng = degr2rad(latLngInDegr[i][LNGIDX]);\n    // sum of cartesian coordinates\n    sumX += Math.cos(lat) * Math.cos(lng);\n    sumY += Math.cos(lat) * Math.sin(lng);\n    sumZ += Math.sin(lat);\n  }\n  var avgX = sumX / latLngInDegr.length;\n  var avgY = sumY / latLngInDegr.length;\n  var avgZ = sumZ / latLngInDegr.length;\n\n  // convert average x, y, z coordinate to latitude and longtitude\n  var lng = Math.atan2(avgY, avgX);\n  var hyp = Math.sqrt(avgX * avgX + avgY * avgY);\n  var lat = Math.atan2(avgZ, hyp);\n  return [rad2degr(lat), rad2degr(lng)];\n};\nexport { getLatLngCenter };","map":{"version":3,"names":["rad2degr","rad","Math","PI","degr2rad","degr","getLatLngCenter","latLngInDegr","LATIDX","LNGIDX","sumX","sumY","sumZ","i","length","lat","lng","cos","sin","avgX","avgY","avgZ","atan2","hyp","sqrt"],"sources":["/Users/sharpie/Desktop/NetCoord Code/Testing/Latest code update/src/helpers.js"],"sourcesContent":["const rad2degr = (rad) => rad * 180 / Math.PI\nconst degr2rad = (degr) => degr * Math.PI / 180\n\n/**\n * @param latLngInDeg array of arrays with latitude and longtitude\n *   pairs in degrees. e.g. [[latitude1, longtitude1], [latitude2\n *   [longtitude2] ...]\n *\n * @return array with the center latitude longtitude pairs in \n *   degrees.\n */\nconst getLatLngCenter = (latLngInDegr) => {\n  var LATIDX = 0;\n  var LNGIDX = 1;\n  var sumX = 0;\n  var sumY = 0;\n  var sumZ = 0;\n\n  for (var i=0; i<latLngInDegr.length; i++) {\n      var lat = degr2rad(latLngInDegr[i][LATIDX]);\n      var lng = degr2rad(latLngInDegr[i][LNGIDX]);\n      // sum of cartesian coordinates\n      sumX += Math.cos(lat) * Math.cos(lng);\n      sumY += Math.cos(lat) * Math.sin(lng);\n      sumZ += Math.sin(lat);\n  }\n\n  var avgX = sumX / latLngInDegr.length;\n  var avgY = sumY / latLngInDegr.length;\n  var avgZ = sumZ / latLngInDegr.length;\n\n  // convert average x, y, z coordinate to latitude and longtitude\n  var lng = Math.atan2(avgY, avgX);\n  var hyp = Math.sqrt(avgX * avgX + avgY * avgY);\n  var lat = Math.atan2(avgZ, hyp);\n\n  return ([rad2degr(lat), rad2degr(lng)]);\n}\n\nexport {\n  getLatLngCenter\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,GAAG,IAAKA,GAAG,GAAG,GAAG,GAAGC,IAAI,CAACC,EAAE;AAC7C,MAAMC,QAAQ,GAAIC,IAAI,IAAKA,IAAI,GAAGH,IAAI,CAACC,EAAE,GAAG,GAAG;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,eAAe,GAAIC,YAAY,IAAK;EACxC,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,IAAI,GAAG,CAAC;EAEZ,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACN,YAAY,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIE,GAAG,GAAGX,QAAQ,CAACG,YAAY,CAACM,CAAC,CAAC,CAACL,MAAM,CAAC,CAAC;IAC3C,IAAIQ,GAAG,GAAGZ,QAAQ,CAACG,YAAY,CAACM,CAAC,CAAC,CAACJ,MAAM,CAAC,CAAC;IAC3C;IACAC,IAAI,IAAIR,IAAI,CAACe,GAAG,CAACF,GAAG,CAAC,GAAGb,IAAI,CAACe,GAAG,CAACD,GAAG,CAAC;IACrCL,IAAI,IAAIT,IAAI,CAACe,GAAG,CAACF,GAAG,CAAC,GAAGb,IAAI,CAACgB,GAAG,CAACF,GAAG,CAAC;IACrCJ,IAAI,IAAIV,IAAI,CAACgB,GAAG,CAACH,GAAG,CAAC;EACzB;EAEA,IAAII,IAAI,GAAGT,IAAI,GAAGH,YAAY,CAACO,MAAM;EACrC,IAAIM,IAAI,GAAGT,IAAI,GAAGJ,YAAY,CAACO,MAAM;EACrC,IAAIO,IAAI,GAAGT,IAAI,GAAGL,YAAY,CAACO,MAAM;;EAErC;EACA,IAAIE,GAAG,GAAGd,IAAI,CAACoB,KAAK,CAACF,IAAI,EAAED,IAAI,CAAC;EAChC,IAAII,GAAG,GAAGrB,IAAI,CAACsB,IAAI,CAACL,IAAI,GAAGA,IAAI,GAAGC,IAAI,GAAGA,IAAI,CAAC;EAC9C,IAAIL,GAAG,GAAGb,IAAI,CAACoB,KAAK,CAACD,IAAI,EAAEE,GAAG,CAAC;EAE/B,OAAQ,CAACvB,QAAQ,CAACe,GAAG,CAAC,EAAEf,QAAQ,CAACgB,GAAG,CAAC,CAAC;AACxC,CAAC;AAED,SACEV,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}