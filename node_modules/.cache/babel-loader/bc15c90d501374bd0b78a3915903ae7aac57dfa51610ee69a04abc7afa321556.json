{"ast":null,"code":"import { mapState } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\nexport default {\n  props: ['clickedNext', 'currentStep'],\n  mixins: [validationMixin],\n  components: {},\n  data() {\n    return {\n      activeCourtWithNumber: [],\n      rosters: [],\n      repopulateExisting: false\n    };\n  },\n  computed: {\n    ...mapState('court', ['courts', 'formCreateEvent']),\n    existingPlayers() {\n      if (this.repopulateExisting) {\n        this.repopulateExisting = false;\n      }\n      if (!this.activeCourtWithNumber.length) {\n        return [];\n      }\n      const courtId = this.activeCourtWithNumber[0];\n      const courtNum = this.activeCourtWithNumber[1];\n      return this.formCreateEvent.selectedCourtNumbers[courtId][courtNum];\n    }\n  },\n  validations: {\n    formCreateEvent: {\n      selectedCourts: {\n        required\n      }\n    }\n  },\n  watch: {\n    $v: {\n      handler: function (val) {\n        if (!val.$invalid) {\n          this.$emit('can-continue', {\n            value: true\n          });\n        } else {\n          this.$emit('can-continue', {\n            value: false\n          });\n        }\n      },\n      deep: true\n    },\n    clickedNext(val) {\n      if (val === true) {\n        this.$v.formCreateEvent.$touch();\n      }\n    }\n  },\n  mounted() {\n    if (!this.$v.$invalid) {\n      this.$emit('can-continue', {\n        value: true\n      });\n    } else {\n      this.$emit('can-continue', {\n        value: false\n      });\n    }\n    this.$store.dispatch('court/fetchRosters', {\n      sport: this.formCreateEvent.selectedSport,\n      gender: this.formCreateEvent.selectedGender\n    }).then(rosters => {\n      this.rosters = rosters;\n    });\n  },\n  methods: {\n    handleSelect(courtId, courtNum) {\n      this.activeCourtWithNumber = [courtId, courtNum];\n      this.$modal.show('player-select-modal');\n    },\n    handleSelectPlayer(val) {\n      const courtId = this.activeCourtWithNumber[0];\n      const courtNum = this.activeCourtWithNumber[1];\n      this.formCreateEvent.selectedCourtNumbers[courtId][courtNum] = val;\n      this.repopulateExisting = true;\n    }\n  }\n};","map":{"version":3,"names":["mapState","validationMixin","required","props","mixins","components","data","activeCourtWithNumber","rosters","repopulateExisting","computed","existingPlayers","length","courtId","courtNum","formCreateEvent","selectedCourtNumbers","validations","selectedCourts","watch","$v","handler","val","$invalid","$emit","value","deep","clickedNext","$touch","mounted","$store","dispatch","sport","selectedSport","gender","selectedGender","then","methods","handleSelect","$modal","show","handleSelectPlayer"],"sources":["src/components/events/StepRoster.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"event-type-wrapper\">\n      <h2>Assign Players</h2>\n    </div>\n    <div\n      v-for=\"selectedCourt in formCreateEvent.selectedCourts\"\n      :key=\"selectedCourt.id\"\n    >\n      <div\n        v-for=\"courtNum in Object.keys(formCreateEvent.selectedCourtNumbers[selectedCourt.id])\"\n        :key=\"courtNum\"\n        class=\"court-button\"\n        @click=\"handleSelect(selectedCourt.id, courtNum)\"\n      >\n        <h4>{{ selectedCourt.name }} {{ courtNum }}</h4>\n      </div>\n    </div>\n    <modal name=\"player-select-modal\">\n      <div class=\"player-select-modal-wrapper\">\n        <div class=\"select-wrapper\">\n          <v-select\n            multiple\n            label=\"name\"\n            :options=\"rosters\"\n            placeholder=\"Select Users\"\n            :value=\"existingPlayers\"\n            @input=\"handleSelectPlayer\"\n          ></v-select>\n        </div>\n      </div>\n    </modal>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport {validationMixin} from 'vuelidate'\nimport {required} from 'vuelidate/lib/validators'\n\nexport default {\n  props: ['clickedNext', 'currentStep'],\n  mixins: [validationMixin],\n  components: { },\n  data () {\n    return {\n      activeCourtWithNumber: [],\n      rosters: [],\n      repopulateExisting: false\n    }\n  },\n  computed: {\n    ...mapState('court', ['courts', 'formCreateEvent']),\n    existingPlayers () {\n      if (this.repopulateExisting) {\n        this.repopulateExisting = false\n      }\n      if (!this.activeCourtWithNumber.length) {\n        return []\n      }\n\n      const courtId = this.activeCourtWithNumber[0]\n      const courtNum = this.activeCourtWithNumber[1]\n      return this.formCreateEvent.selectedCourtNumbers[courtId][courtNum]\n    }\n  },\n  validations: {\n    formCreateEvent: {\n      selectedCourts: {\n        required\n      }\n    }\n  },\n  watch: {\n    $v: {\n      handler: function (val) {\n        if(!val.$invalid) {\n          this.$emit('can-continue', {value: true});\n        } else {\n          this.$emit('can-continue', {value: false});\n        }\n      },\n      deep: true\n    },\n    clickedNext(val) {\n      if(val === true) {\n        this.$v.formCreateEvent.$touch();\n      }\n    }\n  },\n  mounted() {\n    if(!this.$v.$invalid) {\n      this.$emit('can-continue', {value: true});\n    } else {\n      this.$emit('can-continue', {value: false});\n    }\n    this.$store.dispatch('court/fetchRosters', {\n      sport: this.formCreateEvent.selectedSport,\n      gender: this.formCreateEvent.selectedGender\n    }).then((rosters) => {\n      this.rosters = rosters\n    })\n  },\n  methods: {\n    handleSelect (courtId, courtNum) {\n      this.activeCourtWithNumber = [courtId, courtNum]\n      this.$modal.show('player-select-modal')\n    },\n    handleSelectPlayer (val) {\n      const courtId = this.activeCourtWithNumber[0]\n      const courtNum = this.activeCourtWithNumber[1]\n      this.formCreateEvent.selectedCourtNumbers[courtId][courtNum] = val\n      this.repopulateExisting = true\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../scss/variable\";\n\n.event-type-wrapper {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h2 {\n    font-size: 1.5em;\n    margin-bottom: 0;\n  }\n}\n.select-wrapper {\n  & ::v-deep .vs__dropdown-toggle {\n    background: white;\n  }\n}\n.court-button {\n  margin-top: 1rem;\n  background: transparent;\n  border: 1px solid #c2c2c2;\n  padding: 1rem 1rem;\n  color: white;\n\n  &.selected {\n    background: #c2c2c2;\n  }\n\n  h4 {\n    font-weight: 600;\n  }\n}\n.player-select-modal-wrapper {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  padding: 1rem;\n}\n</style>\n"],"mappings":"AAoCA,SAAAA,QAAA;AACA,SAAAC,eAAA;AACA,SAAAC,QAAA;AAEA;EACAC,KAAA;EACAC,MAAA,GAAAH,eAAA;EACAI,UAAA;EACAC,KAAA;IACA;MACAC,qBAAA;MACAC,OAAA;MACAC,kBAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAV,QAAA;IACAW,gBAAA;MACA,SAAAF,kBAAA;QACA,KAAAA,kBAAA;MACA;MACA,UAAAF,qBAAA,CAAAK,MAAA;QACA;MACA;MAEA,MAAAC,OAAA,QAAAN,qBAAA;MACA,MAAAO,QAAA,QAAAP,qBAAA;MACA,YAAAQ,eAAA,CAAAC,oBAAA,CAAAH,OAAA,EAAAC,QAAA;IACA;EACA;EACAG,WAAA;IACAF,eAAA;MACAG,cAAA;QACAhB;MACA;IACA;EACA;EACAiB,KAAA;IACAC,EAAA;MACAC,OAAA,WAAAA,CAAAC,GAAA;QACA,KAAAA,GAAA,CAAAC,QAAA;UACA,KAAAC,KAAA;YAAAC,KAAA;UAAA;QACA;UACA,KAAAD,KAAA;YAAAC,KAAA;UAAA;QACA;MACA;MACAC,IAAA;IACA;IACAC,YAAAL,GAAA;MACA,IAAAA,GAAA;QACA,KAAAF,EAAA,CAAAL,eAAA,CAAAa,MAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,UAAAT,EAAA,CAAAG,QAAA;MACA,KAAAC,KAAA;QAAAC,KAAA;MAAA;IACA;MACA,KAAAD,KAAA;QAAAC,KAAA;MAAA;IACA;IACA,KAAAK,MAAA,CAAAC,QAAA;MACAC,KAAA,OAAAjB,eAAA,CAAAkB,aAAA;MACAC,MAAA,OAAAnB,eAAA,CAAAoB;IACA,GAAAC,IAAA,CAAA5B,OAAA;MACA,KAAAA,OAAA,GAAAA,OAAA;IACA;EACA;EACA6B,OAAA;IACAC,aAAAzB,OAAA,EAAAC,QAAA;MACA,KAAAP,qBAAA,IAAAM,OAAA,EAAAC,QAAA;MACA,KAAAyB,MAAA,CAAAC,IAAA;IACA;IACAC,mBAAAnB,GAAA;MACA,MAAAT,OAAA,QAAAN,qBAAA;MACA,MAAAO,QAAA,QAAAP,qBAAA;MACA,KAAAQ,eAAA,CAAAC,oBAAA,CAAAH,OAAA,EAAAC,QAAA,IAAAQ,GAAA;MACA,KAAAb,kBAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}